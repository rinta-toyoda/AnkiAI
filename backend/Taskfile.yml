version: '3'

tasks:
  # Setup
  setup:
    desc: "Initial project setup with pip"
    cmds:
      - task: install-deps
      - task: env-setup
      - task: generate-api
      - task: hooks-install
      - echo "Setup complete! Run 'task dev' to start."

  uv-setup:
    desc: "Initial project setup with uv"
    cmds:
      - task: install-deps-uv
      - task: env-setup
      - task: generate-api
      - task: hooks-install
      - echo "Setup complete! Run 'task dev-uv' to start with uv."

  generate-api:
    desc: "Generate API models from OpenAPI spec"
    cmds:
      - mkdir -p app/build
      - docker run --rm -v "${PWD}:/local" openapitools/openapi-generator-cli generate -i /local/openapi.yaml -g python-fastapi -o /local/app/build --additional-properties=packageName=ankiai_models,generateSourceCodeOnly=true,packageName=ankiai_models
      - rm -f app/build/.flake8 app/build/.gitignore app/build/security_api.py app/build/src/ankiai_models/security_api.py app/build/openapi.yaml app/build/src/ankiai_models/main.py 2>/dev/null || true
      - rm -rf app/build/src/ankiai_models/impl app/build/src/ankiai_models/apis app/build/tests app/build/Dockerfile app/build/README.md app/build/requirements.txt app/build/docker-compose.yaml app/build/pyproject.toml app/build/setup.cfg 2>/dev/null || true
      - mkdir -p app/build/models
      - cp -r app/build/src/ankiai_models/models/* app/build/models/ 2>/dev/null || true
      - rm -rf app/build/src 2>/dev/null || true

  install-deps:
    desc: "Install dependencies with pip"
    cmds:
      - pip install --upgrade pip
      - pip install -r requirements.txt

  install-deps-uv:
    desc: "Install dependencies with uv"
    cmds:
      - uv sync --extra dev

  env-setup:
    desc: "Create .env file"
    cmds:
      - cp .env.example .env
    status:
      - test -f .env

  # Development - Docker
  up:
    desc: "Start development server with Docker"
    cmds:
      - docker-compose up --build -d

  up-fg:
    desc: "Start development server with Docker in foreground"
    cmds:
      - docker-compose up --build

  down:
    desc: "Stop Docker server"
    cmds:
      - docker-compose down

  destroy:
    desc: "Stop Docker server and remove volumes"
    cmds:
      - docker-compose down -v
      - docker system prune -f

  logs:
    desc: "Show Docker logs"
    cmds:
      - docker-compose logs -f

  # Development - uv
  uv-up:
    desc: "Start development server with uv"
    cmds:
      - uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Legacy aliases for backward compatibility
  dev:
    desc: "Start development server with Docker (legacy alias)"
    cmds:
      - task: up

  dev-uv:
    desc: "Start development server with uv (legacy alias)"
    cmds:
      - task: uv-up

  stop:
    desc: "Stop server (legacy alias)"
    cmds:
      - task: down

  # Code Quality
  format:
    desc: "Format code"
    cmds:
      - docker-compose exec backend black app/
      - docker-compose exec backend isort app/

  lint:
    desc: "Check code quality"
    cmds:
      - docker-compose exec backend flake8 app/
      - docker-compose exec backend mypy app/

  # Git Hooks
  hooks-install:
    desc: "Install git hooks"
    cmds:
      - lefthook install

  hooks-run:
    desc: "Run pre-commit hooks manually"
    cmds:
      - lefthook run pre-commit

  # Utilities
  shell:
    desc: "Access Docker container shell"
    cmds:
      - docker-compose exec backend /bin/bash

  clean:
    desc: "Clean Docker resources (legacy alias)"
    cmds:
      - task: destroy

  # Setup aliases
  setup-docker:
    desc: "Initial project setup with Docker (alias for setup)"
    cmds:
      - task: setup