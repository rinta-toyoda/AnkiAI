# coding: utf-8

"""
    AnkiAI API

    API for generating Anki flashcards with text and media content

    The version of the OpenAPI document: 1.0.0
    Contact: support@ankiai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GenerateTextRequest(BaseModel):
    """
    GenerateTextRequest
    """ # noqa: E501
    prompt: StrictStr = Field(description="Text prompt for generating flashcard content")
    target_lang: StrictStr = Field(description="Target language code (ISO 639-1)", alias="targetLang")
    with_tts: Optional[StrictBool] = Field(default=False, description="Whether to generate text-to-speech audio", alias="withTTS")
    max_terms: Optional[Annotated[int, Field(le=50, strict=True, ge=1)]] = Field(default=10, description="Maximum number of terms to generate", alias="maxTerms")
    max_meanings_per_term: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = Field(default=3, description="Maximum number of meanings per term", alias="maxMeaningsPerTerm")
    __properties: ClassVar[List[str]] = ["prompt", "targetLang", "withTTS", "maxTerms", "maxMeaningsPerTerm"]

    @field_validator('target_lang')
    def target_lang_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('zh-CN', 'zh-TW', 'ja-JP', 'ko-KR', 'en-US', 'es-ES', 'fr-FR', 'de-DE',):
            raise ValueError("must be one of enum values ('zh-CN', 'zh-TW', 'ja-JP', 'ko-KR', 'en-US', 'es-ES', 'fr-FR', 'de-DE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GenerateTextRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GenerateTextRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prompt": obj.get("prompt"),
            "targetLang": obj.get("targetLang"),
            "withTTS": obj.get("withTTS") if obj.get("withTTS") is not None else False,
            "maxTerms": obj.get("maxTerms") if obj.get("maxTerms") is not None else 10,
            "maxMeaningsPerTerm": obj.get("maxMeaningsPerTerm") if obj.get("maxMeaningsPerTerm") is not None else 3
        })
        return _obj


