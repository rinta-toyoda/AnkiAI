# coding: utf-8

"""
    AnkiAI API

    API for generating Anki flashcards with text and media content

    The version of the OpenAPI document: 1.0.0
    Contact: support@ankiai.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AudioItem(BaseModel):
    """
    AudioItem
    """ # noqa: E501
    meaning_index: StrictInt = Field(description="Index of the meaning this audio corresponds to", alias="meaningIndex")
    variant: StrictStr = Field(description="Audio variant type")
    filename: StrictStr = Field(description="Generated filename for the audio")
    ext: StrictStr = Field(description="File extension")
    var_base64: StrictStr = Field(description="Base64 encoded audio data", alias="base64")
    __properties: ClassVar[List[str]] = ["meaningIndex", "variant", "filename", "ext", "base64"]

    @field_validator('variant')
    def variant_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('normal', 'slow',):
            raise ValueError("must be one of enum values ('normal', 'slow')")
        return value

    @field_validator('ext')
    def ext_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('mp3', 'wav',):
            raise ValueError("must be one of enum values ('mp3', 'wav')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AudioItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AudioItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meaningIndex": obj.get("meaningIndex"),
            "variant": obj.get("variant"),
            "filename": obj.get("filename"),
            "ext": obj.get("ext"),
            "base64": obj.get("base64")
        })
        return _obj


